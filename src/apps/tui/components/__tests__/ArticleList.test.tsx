import { render } from 'ink-testing-library';
import { describe, it, expect, vi } from 'vitest';
import { ArticleList } from '../ArticleList.js';
import type { Article } from '../../../../types/index.js';

// convertHtmlToText„É¢„ÉÉ„ÇØ
vi.mock('../../utils/html.js', () => ({
  convertHtmlToText: vi.fn((html: string) => html.replace(/<[^>]*>/g, '')),
}));

describe('ArticleList', () => {
  const createMockArticle = (
    id: number,
    options: {
      is_favorite?: boolean;
      title?: string;
      content?: string;
      author?: string;
      published_at?: Date;
    } = {}
  ): Article => ({
    id,
    feed_id: 1,
    url: `https://example.com/article${id}`,
    title: options.title || `Article ${id}`,
    content: options.content || `Content for article ${id}`,
    summary: `Summary ${id}`,
    author: options.author || undefined,
    published_at: options.published_at || new Date('2024-01-01T12:00:00Z'),
    is_read: false,
    is_favorite: options.is_favorite || false,
    thumbnail_url: undefined,
    created_at: new Date(),
    updated_at: new Date(),
  });

  const defaultProps = {
    articles: [createMockArticle(1)],
    scrollOffset: 0,
    onScrollOffsetChange: vi.fn(),
    isPinned: false,
  };

  describe('Êú™Ë™≠Ë®ò‰∫ã„Åå„Å™„ÅÑÂ†¥Âêà', () => {
    it('Êú™Ë™≠Ë®ò‰∫ã„Åå„Å™„ÅÑÊó®„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åô„Çã', () => {
      const { lastFrame } = render(<ArticleList {...defaultProps} articles={[]} />);

      const output = lastFrame();
      expect(output).toContain('Êú™Ë™≠Ë®ò‰∫ã„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
      expect(output).toContain('„Éí„É≥„Éà: `r` „Åß„Éï„Ç£„Éº„Éâ„ÇíÊõ¥Êñ∞„Åß„Åç„Åæ„Åô');
    });
  });

  describe('Ë®ò‰∫ã„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà', () => {
    it('Ë®ò‰∫ã„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„Å®„ÅÑ„ÅÜ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åô„Çã', () => {
      const { lastFrame } = render(<ArticleList {...defaultProps} selectedArticle={undefined} />);

      const output = lastFrame();
      expect(output).toContain('Ë®ò‰∫ã„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    });

    it('Êú™Ë™≠‰ª∂Êï∞„ÇíË°®Á§∫„Åô„Çã', () => {
      const articles = [createMockArticle(1), createMockArticle(2)];
      const { lastFrame } = render(
        <ArticleList {...defaultProps} articles={articles} selectedArticle={undefined} />
      );

      const output = lastFrame();
      expect(output).toContain('Êú™Ë™≠2‰ª∂');
    });
  });

  describe('Ë®ò‰∫ãË©≥Á¥∞Ë°®Á§∫', () => {
    it('Ë®ò‰∫ã„ÅÆ„Çø„Ç§„Éà„É´„ÄÅÂÖ¨ÈñãÊó•„ÄÅURL„ÇíË°®Á§∫„Åô„Çã', () => {
      const article = createMockArticle(1, {
        title: 'Test Article Title',
        published_at: new Date('2024-01-15T10:30:00Z'),
      });

      const { lastFrame } = render(
        <ArticleList {...defaultProps} articles={[article]} selectedArticle={article} />
      );

      const output = lastFrame();
      expect(output).toContain('Test Article Title');
      expect(output).toContain('ÂÖ¨ÈñãÊó•: 2024Âπ¥1Êúà15Êó•');
      expect(output).toContain('URL: https://example.com/article1');
    });

    it('ËëóËÄÖ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØËëóËÄÖÊÉÖÂ†±„ÇíË°®Á§∫„Åô„Çã', () => {
      const article = createMockArticle(1, {
        author: 'John Doe',
      });

      const { lastFrame } = render(
        <ArticleList {...defaultProps} articles={[article]} selectedArticle={article} />
      );

      const output = lastFrame();
      expect(output).toContain('ËëóËÄÖ: John Doe');
    });
  });

  describe('„ÅäÊ∞ó„Å´ÂÖ•„Çä„Éª„Éî„É≥Ë°®Á§∫„É≠„Ç∏„ÉÉ„ÇØ', () => {
    it('„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆ„Åø„ÅÆÂ†¥Âêà„ÄÅ‚òÖ„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÇíË°®Á§∫„Åô„Çã', () => {
      const article = createMockArticle(1, {
        is_favorite: true,
      });

      const { lastFrame } = render(
        <ArticleList
          {...defaultProps}
          articles={[article]}
          selectedArticle={article}
          isPinned={false}
        />
      );

      const output = lastFrame();
      expect(output).toContain('‚òÖ „ÅäÊ∞ó„Å´ÂÖ•„Çä');
      expect(output).not.toContain('üìå „Éî„É≥');
    });

    it('„Éî„É≥„ÅÆ„Åø„ÅÆÂ†¥Âêà„ÄÅüìå„Éî„É≥„ÇíË°®Á§∫„Åô„Çã', () => {
      const article = createMockArticle(1, {
        is_favorite: false,
      });

      const { lastFrame } = render(
        <ArticleList
          {...defaultProps}
          articles={[article]}
          selectedArticle={article}
          isPinned={true}
        />
      );

      const output = lastFrame();
      expect(output).toContain('üìå „Éî„É≥');
      expect(output).not.toContain('‚òÖ „ÅäÊ∞ó„Å´ÂÖ•„Çä');
    });

    it('„ÅäÊ∞ó„Å´ÂÖ•„Çä„Å®„Éî„É≥‰∏°Êñπ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅ‰∏°Êñπ„ÇíË°®Á§∫„Åô„Çã', () => {
      const article = createMockArticle(1, {
        is_favorite: true,
      });

      const { lastFrame } = render(
        <ArticleList
          {...defaultProps}
          articles={[article]}
          selectedArticle={article}
          isPinned={true}
        />
      );

      const output = lastFrame();
      expect(output).toContain('‚òÖ „ÅäÊ∞ó„Å´ÂÖ•„Çä');
      expect(output).toContain('üìå „Éî„É≥');
    });

    it('„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÇÇ„Éî„É≥„ÇÇ„Å™„ÅÑÂ†¥Âêà„ÄÅ„Å©„Å°„Çâ„ÇÇË°®Á§∫„Åó„Å™„ÅÑ', () => {
      const article = createMockArticle(1, {
        is_favorite: false,
      });

      const { lastFrame } = render(
        <ArticleList
          {...defaultProps}
          articles={[article]}
          selectedArticle={article}
          isPinned={false}
        />
      );

      const output = lastFrame();
      expect(output).not.toContain('‚òÖ „ÅäÊ∞ó„Å´ÂÖ•„Çä');
      expect(output).not.toContain('üìå „Éî„É≥');
    });
  });

  describe('Âå∫Âàá„ÇäÊñáÂ≠ó„ÅÆÊù°‰ª∂ÂàÜÂ≤ê', () => {
    it('ËëóËÄÖ„Åå„Å™„ÅÑÂ†¥Âêà„Åß„ÇÇ„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆÂå∫Âàá„ÇäÊñáÂ≠ó„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      const article = createMockArticle(1, {
        author: undefined,
        is_favorite: true,
      });

      const { lastFrame } = render(
        <ArticleList {...defaultProps} articles={[article]} selectedArticle={article} />
      );

      const output = lastFrame();
      // „ÄåÂÖ¨ÈñãÊó•: ... | ‚òÖ „ÅäÊ∞ó„Å´ÂÖ•„Çä„Äç„ÅÆÂΩ¢Âºè
      expect(output).toMatch(/ÂÖ¨ÈñãÊó•:.*\|.*‚òÖ „ÅäÊ∞ó„Å´ÂÖ•„Çä/);
    });

    it('ËëóËÄÖ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆÂå∫Âàá„ÇäÊñáÂ≠ó„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      const article = createMockArticle(1, {
        author: 'John Doe',
        is_favorite: true,
      });

      const { lastFrame } = render(
        <ArticleList {...defaultProps} articles={[article]} selectedArticle={article} />
      );

      const output = lastFrame();
      // „ÄåÂÖ¨ÈñãÊó•: ... | ËëóËÄÖ: John Doe | ‚òÖ „ÅäÊ∞ó„Å´ÂÖ•„Çä„Äç„ÅÆÂΩ¢Âºè
      expect(output).toMatch(/ËëóËÄÖ: John Doe.*\|.*‚òÖ „ÅäÊ∞ó„Å´ÂÖ•„Çä/);
    });

    it('ËëóËÄÖ„Å®„ÅäÊ∞ó„Å´ÂÖ•„Çä„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„Éî„É≥„ÅÆÂå∫Âàá„ÇäÊñáÂ≠ó„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      const article = createMockArticle(1, {
        author: 'John Doe',
        is_favorite: true,
      });

      const { lastFrame } = render(
        <ArticleList
          {...defaultProps}
          articles={[article]}
          selectedArticle={article}
          isPinned={true}
        />
      );

      const output = lastFrame();
      // „Äå... | ‚òÖ „ÅäÊ∞ó„Å´ÂÖ•„Çä | üìå „Éî„É≥„Äç„ÅÆÂΩ¢Âºè
      expect(output).toMatch(/‚òÖ „ÅäÊ∞ó„Å´ÂÖ•„Çä.*\|.*üìå „Éî„É≥/);
    });

    it('ËëóËÄÖ„ÅÆ„Åø„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„Éî„É≥„ÅÆÂå∫Âàá„ÇäÊñáÂ≠ó„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      const article = createMockArticle(1, {
        author: 'John Doe',
        is_favorite: false,
      });

      const { lastFrame } = render(
        <ArticleList
          {...defaultProps}
          articles={[article]}
          selectedArticle={article}
          isPinned={true}
        />
      );

      const output = lastFrame();
      // „ÄåËëóËÄÖ: John Doe | üìå „Éî„É≥„Äç„ÅÆÂΩ¢Âºè
      expect(output).toMatch(/ËëóËÄÖ: John Doe.*\|.*üìå „Éî„É≥/);
    });
  });

  describe('„Ç≥„É≥„ÉÜ„É≥„ÉÑË°®Á§∫', () => {
    it('Ë®ò‰∫ã„ÅåÈÅ∏Êäû„Åï„Çå„Åü„Å®„Åç„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã', () => {
      const article = createMockArticle(1, {
        content: '<p>This is test content</p>',
      });

      const { lastFrame } = render(
        <ArticleList {...defaultProps} articles={[article]} selectedArticle={article} />
      );

      const output = lastFrame();
      // „Çø„Ç§„Éà„É´„Å®Âü∫Êú¨ÊÉÖÂ†±„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(output).toContain('Article 1');
      expect(output).toContain('ÂÖ¨ÈñãÊó•:');
    });

    it('„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åå„Å™„ÅÑÂ†¥Âêà„Åß„ÇÇ„Ç®„É©„Éº„Å´„Å™„Çâ„Å™„ÅÑ', () => {
      const article = createMockArticle(1, {
        content: '',
      });

      const { lastFrame } = render(
        <ArticleList {...defaultProps} articles={[article]} selectedArticle={article} />
      );

      const output = lastFrame();
      expect(output).toContain('Article 1'); // „Çø„Ç§„Éà„É´„ÅØË°®Á§∫„Åï„Çå„Çã
    });
  });

  describe('„Çπ„ÇØ„É≠„Éº„É´Ê©üËÉΩ', () => {
    it('onScrollOffsetChange„ÅåÂëº„Å∞„Çå„Çã', () => {
      const onScrollOffsetChange = vi.fn();
      const article = createMockArticle(1);

      render(
        <ArticleList
          {...defaultProps}
          articles={[article]}
          selectedArticle={article}
          onScrollOffsetChange={onScrollOffsetChange}
        />
      );

      // Ë®ò‰∫ãÈÅ∏ÊäûÊôÇ„Å´„Çπ„ÇØ„É≠„Éº„É´‰ΩçÁΩÆ„Åå„É™„Çª„ÉÉ„Éà„Åï„Çå„Çã
      expect(onScrollOffsetChange).toHaveBeenCalledWith(0);
    });
  });
});
